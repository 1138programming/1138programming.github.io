<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-04T16:55:07-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/06/13/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-06-13T15:47:56-07:00</published><updated>2024-06-13T15:47:56-07:00</updated><id>http://localhost:4000/jekyll/update/2024/06/13/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/06/13/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span><span class="n">c</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Welcome to Jekyll! copy</title><link href="http://localhost:4000/jekyll/update/2024/06/13/welcome-to-jekyll-copy.html" rel="alternate" type="text/html" title="Welcome to Jekyll! copy" /><published>2024-06-13T15:47:56-07:00</published><updated>2024-06-13T15:47:56-07:00</updated><id>http://localhost:4000/jekyll/update/2024/06/13/welcome-to-jekyll%20copy</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/06/13/welcome-to-jekyll-copy.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span><span class="n">c</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Swerve</title><link href="http://localhost:4000/jekyll/update/2024/04/25/swerve.html" rel="alternate" type="text/html" title="Swerve" /><published>2024-04-25T16:48:44-07:00</published><updated>2024-04-25T16:48:44-07:00</updated><id>http://localhost:4000/jekyll/update/2024/04/25/swerve</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/04/25/swerve.html"><![CDATA[<p>In this guide, we will walk through the first steps for creating a usable swerve drive. The first of these steps is to create a subsystem to store swerve modules. </p>

<h1 id="creating-the-objects">Creating the Objects</h1>

<p>The first step in making the Swerve module class is to create all of the objects that you will need:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">CANSparkMax</span> <span class="n">angleMotor</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">CANSparkFlex</span> <span class="n">driveMotor</span><span class="o">;</span>

<span class="kd">private</span> <span class="nc">CANcoder</span> <span class="n">canCoder</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">RelativeEncoder</span> <span class="n">driveEncoder</span><span class="o">;</span>

<span class="kd">private</span> <span class="nc">PIDController</span> <span class="n">angleController</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">SparkPIDController</span> <span class="n">drivingPidController</span><span class="o">;</span>

<span class="kd">private</span> <span class="nc">SwerveModulePosition</span> <span class="n">prevPosition</span><span class="o">;</span>

<span class="kd">private</span> <span class="kt">double</span> <span class="n">offset</span><span class="o">;</span>
</code></pre></div></div>

<p>The first two objects are the Drive motors. The type of motor object that we use will depend on the type of motor mounted on the robot. For any further info consult <a href="https://app.nuclino.com/t/b/7572f3be-36ea-489a-a519-7fad9a04e690?n">Motor Controllers</a>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">CANSparkMax</span> <span class="n">angleMotor</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">CANSparkFlex</span> <span class="n">driveMotor</span><span class="o">;</span>
</code></pre></div></div>

<p>The second two objects are the encoders that we use for controlling the motors. The first is the rotation CanCoder mounted on the top of the module and gives us data on the the rotation of the wheel. The second is the drive motor encoder which tells us the relative speed of the drive motor. For any more questions consult <a href="https://app.nuclino.com/t/b/606da02b-0873-4549-8fab-55ee90987463?n">Encoders</a>. </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">CANcoder</span> <span class="n">canCoder</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">RelativeEncoder</span> <span class="n">driveEncoder</span><span class="o">;</span>
</code></pre></div></div>

<p>The third two objects are the PID controllers. These are used to more accurately control the rotation and drive functions of the module. For any questions consult <a href="https://app.nuclino.com/t/b/49a5bdf9-ae8a-4db4-8fe3-8b7a326ea4f5?n">How to PID</a>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">PIDController</span> <span class="n">angleController</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">SparkPIDController</span> <span class="n">drivingPidController</span><span class="o">;</span>
</code></pre></div></div>

<p> Fourth, we use a object called a Swerve module position. This records the angle and relative speed of the module as a module state. </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">SwerveModulePosition</span> <span class="n">prevPosition</span><span class="o">;</span>
</code></pre></div></div>

<p>Finally, we set an offset on the rotation motor to make sure it points forward. </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">double</span> <span class="n">offset</span><span class="o">;</span>
</code></pre></div></div>

<h1 id="writing-the-main-class">Writing the main class</h1>

<p>This second step is to write the actual class for the swerve module. </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">SwerveModule</span><span class="o">(</span><span class="kt">int</span> <span class="n">angleMotorID</span><span class="o">,</span> <span class="kt">int</span> <span class="n">driveMotorID</span><span class="o">,</span> <span class="kt">int</span> <span class="n">encoderPort</span><span class="o">,</span> <span class="kt">double</span> <span class="n">offset</span><span class="o">,</span> 
                      <span class="kt">boolean</span> <span class="n">driveMotorReversed</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">angleMotorReversed</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">angleMotor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CANSparkMax</span><span class="o">(</span><span class="n">angleMotorID</span><span class="o">,</span> <span class="nc">MotorType</span><span class="o">.</span><span class="na">kBrushless</span><span class="o">);</span>
    <span class="n">driveMotor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CANSparkFlex</span><span class="o">(</span><span class="n">driveMotorID</span><span class="o">,</span> <span class="nc">MotorType</span><span class="o">.</span><span class="na">kBrushless</span><span class="o">);</span>
    
    <span class="n">angleMotor</span><span class="o">.</span><span class="na">setIdleMode</span><span class="o">(</span><span class="nc">IdleMode</span><span class="o">.</span><span class="na">kBrake</span><span class="o">);</span>
    <span class="n">driveMotor</span><span class="o">.</span><span class="na">setIdleMode</span><span class="o">(</span><span class="nc">IdleMode</span><span class="o">.</span><span class="na">kBrake</span><span class="o">);</span>
    
    <span class="k">this</span><span class="o">.</span><span class="na">angleMotor</span><span class="o">.</span><span class="na">setInverted</span><span class="o">(</span><span class="n">angleMotorReversed</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">driveMotor</span><span class="o">.</span><span class="na">setInverted</span><span class="o">(</span><span class="n">driveMotorReversed</span><span class="o">);</span>
    
    <span class="k">this</span><span class="o">.</span><span class="na">driveMotor</span><span class="o">.</span><span class="na">setSmartCurrentLimit</span><span class="o">(</span><span class="nc">KDriveMotorCurrentLimit</span><span class="o">);</span> <span class="c1">// CURRENTLY 85! NEEDS TESTING</span>
    <span class="k">this</span><span class="o">.</span><span class="na">angleMotor</span><span class="o">.</span><span class="na">setSmartCurrentLimit</span><span class="o">(</span><span class="nc">KAngleMotorCurrentLimit</span><span class="o">);</span> <span class="c1">// 40</span>

    <span class="n">canCoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CANcoder</span><span class="o">(</span><span class="n">encoderPort</span><span class="o">);</span>

    <span class="nc">MagnetSensorConfigs</span> <span class="n">canCoderConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MagnetSensorConfigs</span><span class="o">();</span>

    <span class="kt">double</span> <span class="n">offsetToRotations</span> <span class="o">=</span> <span class="n">offset</span><span class="o">/</span><span class="mi">360</span><span class="o">;</span>

    <span class="n">canCoderConfig</span><span class="o">.</span><span class="na">AbsoluteSensorRange</span> <span class="o">=</span> <span class="nc">AbsoluteSensorRangeValue</span><span class="o">.</span><span class="na">Signed_PlusMinusHalf</span><span class="o">;</span>
    <span class="n">canCoderConfig</span><span class="o">.</span><span class="na">SensorDirection</span> <span class="o">=</span> <span class="nc">SensorDirectionValue</span><span class="o">.</span><span class="na">CounterClockwise_Positive</span><span class="o">;</span>
    <span class="n">canCoderConfig</span><span class="o">.</span><span class="na">MagnetOffset</span> <span class="o">=</span> <span class="n">offsetToRotations</span><span class="o">;</span>
    <span class="n">canCoder</span><span class="o">.</span><span class="na">getConfigurator</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">canCoderConfig</span><span class="o">);</span>

    <span class="c1">// driveEncoder = driveMotor.getExternalEncoder(Type.kQuadrature, 1);</span>
    <span class="n">driveEncoder</span> <span class="o">=</span> <span class="n">driveMotor</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">();</span>
    
    <span class="n">driveEncoder</span><span class="o">.</span><span class="na">setPositionConversionFactor</span><span class="o">(</span><span class="nc">KDriveMotorRotToMeter</span><span class="o">);</span>
    <span class="n">driveEncoder</span><span class="o">.</span><span class="na">setVelocityConversionFactor</span><span class="o">(</span><span class="nc">KDriveMotorRPMToMetersPerSec</span><span class="o">);</span>

    
    <span class="n">angleController</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PIDController</span><span class="o">(</span><span class="nc">KAngleP</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="nc">KAngleD</span><span class="o">);</span>
    <span class="n">angleController</span><span class="o">.</span><span class="na">enableContinuousInput</span><span class="o">(-</span><span class="mi">180</span><span class="o">,</span> <span class="mi">180</span><span class="o">);</span> 
      <span class="c1">// Tells PIDController that 180 deg is same in both directions</span>

    <span class="n">drivingPidController</span> <span class="o">=</span> <span class="n">driveMotor</span><span class="o">.</span><span class="na">getPIDController</span><span class="o">();</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setP</span><span class="o">(</span><span class="nc">KDrivingPidP</span><span class="o">);</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setI</span><span class="o">(</span><span class="nc">KDrivingPidI</span><span class="o">);</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setD</span><span class="o">(</span><span class="nc">KDrivingPidD</span><span class="o">);</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setFF</span><span class="o">(</span><span class="mi">1</span><span class="o">/</span><span class="nc">KNeoVortexMaxRPM</span><span class="o">);</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setOutputRange</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>The first step of this is to set up the motor controllers. This has three steps, setting the motor controller to new motor controller objects, telling the motors whether they should be inverted or not, and finally setting the motors current limit. </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">angleMotor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CANSparkMax</span><span class="o">(</span><span class="n">angleMotorID</span><span class="o">,</span> <span class="nc">MotorType</span><span class="o">.</span><span class="na">kBrushless</span><span class="o">);</span>
    <span class="n">driveMotor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CANSparkFlex</span><span class="o">(</span><span class="n">driveMotorID</span><span class="o">,</span> <span class="nc">MotorType</span><span class="o">.</span><span class="na">kBrushless</span><span class="o">);</span>
    
    <span class="n">angleMotor</span><span class="o">.</span><span class="na">setIdleMode</span><span class="o">(</span><span class="nc">IdleMode</span><span class="o">.</span><span class="na">kBrake</span><span class="o">);</span>
    <span class="n">driveMotor</span><span class="o">.</span><span class="na">setIdleMode</span><span class="o">(</span><span class="nc">IdleMode</span><span class="o">.</span><span class="na">kBrake</span><span class="o">);</span>
    
    <span class="k">this</span><span class="o">.</span><span class="na">angleMotor</span><span class="o">.</span><span class="na">setInverted</span><span class="o">(</span><span class="n">angleMotorReversed</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">driveMotor</span><span class="o">.</span><span class="na">setInverted</span><span class="o">(</span><span class="n">driveMotorReversed</span><span class="o">);</span>
    
    <span class="k">this</span><span class="o">.</span><span class="na">driveMotor</span><span class="o">.</span><span class="na">setSmartCurrentLimit</span><span class="o">(</span><span class="nc">KDriveMotorCurrentLimit</span><span class="o">);</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">angleMotor</span><span class="o">.</span><span class="na">setSmartCurrentLimit</span><span class="o">(</span><span class="nc">KAngleMotorCurrentLimit</span><span class="o">);</span>
</code></pre></div></div>

<p>The second step is to set up for the CanCoder. The CanCoder is setup by creating a CanCoder Configuration object and applying it to the CanCoder. In order to create a config object, you need to tell the object its sensor range, sensor direction, and offset(in rotations). </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">canCoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CANcoder</span><span class="o">(</span><span class="n">encoderPort</span><span class="o">);</span>

    <span class="nc">MagnetSensorConfigs</span> <span class="n">canCoderConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MagnetSensorConfigs</span><span class="o">();</span>

    <span class="kt">double</span> <span class="n">offsetToRotations</span> <span class="o">=</span> <span class="n">offset</span><span class="o">/</span><span class="mi">360</span><span class="o">;</span>

    <span class="n">canCoderConfig</span><span class="o">.</span><span class="na">AbsoluteSensorRange</span> <span class="o">=</span> <span class="nc">AbsoluteSensorRangeValue</span><span class="o">.</span><span class="na">Signed_PlusMinusHalf</span><span class="o">;</span>
    <span class="n">canCoderConfig</span><span class="o">.</span><span class="na">SensorDirection</span> <span class="o">=</span> <span class="nc">SensorDirectionValue</span><span class="o">.</span><span class="na">CounterClockwise_Positive</span><span class="o">;</span>
    <span class="n">canCoderConfig</span><span class="o">.</span><span class="na">MagnetOffset</span> <span class="o">=</span> <span class="n">offsetToRotations</span><span class="o">;</span>
    <span class="n">canCoder</span><span class="o">.</span><span class="na">getConfigurator</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">canCoderConfig</span><span class="o">);</span>
</code></pre></div></div>

<p>The third step is to set up the internal encoder in the drive motor. We also set the motor so it returns data in meters and meters per second. </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">driveEncoder</span> <span class="o">=</span> <span class="n">driveMotor</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">();</span>
    
    <span class="n">driveEncoder</span><span class="o">.</span><span class="na">setPositionConversionFactor</span><span class="o">(</span><span class="nc">KDriveMotorRotToMeter</span><span class="o">);</span>
    <span class="n">driveEncoder</span><span class="o">.</span><span class="na">setVelocityConversionFactor</span><span class="o">(</span><span class="nc">KDriveMotorRPMToMetersPerSec</span><span class="o">);</span>
</code></pre></div></div>

<p>Finally we create and set the PID controllers.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">angleController</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PIDController</span><span class="o">(</span><span class="nc">KAngleP</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="nc">KAngleD</span><span class="o">);</span>
    <span class="n">angleController</span><span class="o">.</span><span class="na">enableContinuousInput</span><span class="o">(-</span><span class="mi">180</span><span class="o">,</span> <span class="mi">180</span><span class="o">);</span> 
      <span class="c1">// Tells PIDController that 180 deg is same in both directions</span>

    <span class="n">drivingPidController</span> <span class="o">=</span> <span class="n">driveMotor</span><span class="o">.</span><span class="na">getPIDController</span><span class="o">();</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setP</span><span class="o">(</span><span class="nc">KDrivingPidP</span><span class="o">);</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setI</span><span class="o">(</span><span class="nc">KDrivingPidI</span><span class="o">);</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setD</span><span class="o">(</span><span class="nc">KDrivingPidD</span><span class="o">);</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setFF</span><span class="o">(</span><span class="mi">1</span><span class="o">/</span><span class="nc">KNeoVortexMaxRPM</span><span class="o">);</span>
    <span class="n">drivingPidController</span><span class="o">.</span><span class="na">setOutputRange</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="setting-desired-module-states">Setting Desired Module States</h1>

<p>Finally, we need to actually create a function to set tahe module states. This is done using the following functions. </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDesiredState</span><span class="o">(</span><span class="nc">SwerveModuleState</span> <span class="n">desiredState</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">double</span> <span class="n">angleMotorOutput</span><span class="o">;</span>
    <span class="kt">double</span> <span class="n">driveMotorOutput</span><span class="o">;</span>
    
    <span class="nc">Rotation2d</span> <span class="n">currentAngleR2D</span> <span class="o">=</span> <span class="n">getAngleR2D</span><span class="o">();</span>
    <span class="n">desiredState</span> <span class="o">=</span> <span class="nc">SwerveModuleState</span><span class="o">.</span><span class="na">optimize</span><span class="o">(</span><span class="n">desiredState</span><span class="o">,</span> <span class="n">currentAngleR2D</span><span class="o">);</span>
    <span class="n">angleMotorOutput</span> <span class="o">=</span> <span class="n">angleController</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="n">getAngleDeg</span><span class="o">(),</span> <span class="n">desiredState</span><span class="o">.</span><span class="na">angle</span><span class="o">.</span><span class="na">getDegrees</span><span class="o">());</span>
    
    <span class="n">driveMotorOutput</span> <span class="o">=</span> <span class="n">desiredState</span><span class="o">.</span><span class="na">speedMetersPerSecond</span> <span class="o">/</span> <span class="nc">KPhysicalMaxDriveSpeedMPS</span><span class="o">;</span>
    <span class="c1">// driveMotorOutput = desiredState.speedMetersPerSecond;</span>
    <span class="c1">// driveMotorOutput = driveController.calculate(getDriveEncoderVel(), desiredState.speedMetersPerSecond) / KPhysicalMaxDriveSpeedMPS;</span>
    
    <span class="n">angleMotor</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">angleMotorOutput</span><span class="o">);</span>
    <span class="n">driveMotor</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">driveMotorOutput</span><span class="o">);</span> 
  <span class="o">}</span>

</code></pre></div></div>

<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[In this guide, we will walk through the first steps for creating a usable swerve drive. The first of these steps is to create a subsystem to store swerve modules.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/docs/jekyll/update/2024/04/25/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-04-25T16:48:44-07:00</published><updated>2024-04-25T16:48:44-07:00</updated><id>http://localhost:4000/docs/jekyll/update/2024/04/25/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/docs/jekyll/update/2024/04/25/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="docs" /><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/docs/jekyll/update/2024/04/25/swerve.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-04-25T16:48:44-07:00</published><updated>2024-04-25T16:48:44-07:00</updated><id>http://localhost:4000/docs/jekyll/update/2024/04/25/swerve</id><content type="html" xml:base="http://localhost:4000/docs/jekyll/update/2024/04/25/swerve.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="docs" /><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>